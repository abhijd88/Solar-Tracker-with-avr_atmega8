
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001c2  00000000  00000000  00000177  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000108  00000000  00000000  00000339  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000208  00000000  00000000  00000441  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d0  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000118  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<util/delay.h>

int  main(void)
  {
  unsigned  int adc_value0,adc_value1;	// Variable to hold ADC  result
  DDRB=0xff;	// Set Port B for LED output
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
  PORTB  = 0x00;	// Clear PortB pins
  70:	18 ba       	out	0x18, r1	; 24

 

  while (1)	//Forever 
	{
	 ADCSRA  = (1<<ADEN) | (1<<ADPS2) ; // Set ADCSRA Register with division factor 16
  72:	64 e8       	ldi	r22, 0x84	; 132
		 PORTB=0x00;
		 
		 }
	  else if (adc_value0<adc_value1)
	  {
	     PORTB=0x02;
  74:	a2 e0       	ldi	r26, 0x02	; 2
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  76:	48 ec       	ldi	r20, 0xC8	; 200
  78:	50 e0       	ldi	r21, 0x00	; 0
	 
	 ADCSRA  = 0x00 ;
	 
	  if (adc_value0>adc_value1)
	  {
	     PORTB=0x01;
  7a:	71 e0       	ldi	r23, 0x01	; 1

 

  while (1)	//Forever 
	{
	 ADCSRA  = (1<<ADEN) | (1<<ADPS2) ; // Set ADCSRA Register with division factor 16
  7c:	66 b9       	out	0x06, r22	; 6
	 ADMUX |=(1<<ADLAR);
  7e:	3d 9a       	sbi	0x07, 5	; 7
	 ADMUX &= ~( (1<<MUX1) | (1<<MUX0) );	//ADC0 SELECTED
  80:	87 b1       	in	r24, 0x07	; 7
  82:	8c 7f       	andi	r24, 0xFC	; 252
  84:	87 b9       	out	0x07, r24	; 7
  	 ADCSRA  |= (1<<ADSC);	// Start conversion
  86:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA &  (1<<ADSC));
  88:	36 99       	sbic	0x06, 6	; 6
  8a:	fe cf       	rjmp	.-4      	; 0x88 <main+0x1c>
		// wait until conversion  completes; ADSC=0 means Complete
  	 adc_value0 = ADCH;	//Store ADC result
  8c:	85 b1       	in	r24, 0x05	; 5
  8e:	28 2f       	mov	r18, r24
  90:	30 e0       	ldi	r19, 0x00	; 0
	 ADCSRA  = 0x00 ;
  92:	16 b8       	out	0x06, r1	; 6
	 
		 ////////////////////////////
		ADCSRA  = (1<<ADEN) | (1<<ADPS2) ; // Set ADCSRA Register with division factor 16
  94:	66 b9       	out	0x06, r22	; 6
	 ADMUX |= (1<<MUX0) ;	//ADC1 SELECTED
  96:	38 9a       	sbi	0x07, 0	; 7
  	 ADCSRA  |= (1<<ADSC);	// Start conversion
  98:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA &  (1<<ADSC));
  9a:	36 99       	sbic	0x06, 6	; 6
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x2e>
		// wait until conversion  completes; ADSC=0 means Complete
		
  	 adc_value1 = ADCH;	//Store ADC result 
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	90 e0       	ldi	r25, 0x00	; 0
	 
	 ADCSRA  = 0x00 ;
  a2:	16 b8       	out	0x06, r1	; 6
	 
	  if (adc_value0>adc_value1)
  a4:	82 17       	cp	r24, r18
  a6:	93 07       	cpc	r25, r19
  a8:	48 f4       	brcc	.+18     	; 0xbc <main+0x50>
	  {
	     PORTB=0x01;
  aa:	78 bb       	out	0x18, r23	; 24
  ac:	88 ee       	ldi	r24, 0xE8	; 232
  ae:	93 e0       	ldi	r25, 0x03	; 3
  b0:	fa 01       	movw	r30, r20
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x46>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b8:	d9 f7       	brne	.-10     	; 0xb0 <main+0x44>
  ba:	0b c0       	rjmp	.+22     	; 0xd2 <main+0x66>
		 _delay_ms(100);
		 PORTB=0x00;
		 
		 }
	  else if (adc_value0<adc_value1)
  bc:	28 17       	cp	r18, r24
  be:	39 07       	cpc	r19, r25
  c0:	40 f4       	brcc	.+16     	; 0xd2 <main+0x66>
	  {
	     PORTB=0x02;
  c2:	a8 bb       	out	0x18, r26	; 24
  c4:	88 ee       	ldi	r24, 0xE8	; 232
  c6:	93 e0       	ldi	r25, 0x03	; 3
  c8:	fa 01       	movw	r30, r20
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d0:	d9 f7       	brne	.-10     	; 0xc8 <main+0x5c>
		 _delay_ms(100);
		 PORTB=0x00;
		 } 
	  else
	  {
	     PORTB=0x00;
  d2:	18 ba       	out	0x18, r1	; 24
  d4:	80 e1       	ldi	r24, 0x10	; 16
  d6:	97 e2       	ldi	r25, 0x27	; 39
  d8:	fa 01       	movw	r30, r20
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e0:	69 f2       	breq	.-102    	; 0x7c <main+0x10>
  e2:	fa cf       	rjmp	.-12     	; 0xd8 <main+0x6c>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
